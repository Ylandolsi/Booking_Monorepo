/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as AppRouteImport } from './routes/app'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as TestMentorRequiredRouteImport } from './routes/test/mentor-required'
import { Route as TestImgRouteImport } from './routes/test/img'
import { Route as TestDashboardRouteImport } from './routes/test/dashboard'
import { Route as TestBookingDemoRouteImport } from './routes/test/booking-demo'
import { Route as TestAlreadyRouteImport } from './routes/test/already'
import { Route as ErrorExpSimpleLoadingDemoRouteImport } from './routes/error-exp/simple-loading-demo'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as AuthEmailVerificationRouteImport } from './routes/auth/email-verification'
import { Route as AuthEmailVerificationVerifiedRouteImport } from './routes/auth/email-verification.verified'
import { Route as AppProfileUserSlugRouteImport } from './routes/app/profile.$userSlug'
import { Route as AppMentorSetScheduleRouteImport } from './routes/app/mentor/set-schedule'
import { Route as AppMentorBecomeRouteImport } from './routes/app/mentor/become'
import { Route as AppBookingSessionMentorSlugRouteImport } from './routes/app/booking/session.$mentorSlug'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const TestMentorRequiredRoute = TestMentorRequiredRouteImport.update({
  id: '/test/mentor-required',
  path: '/test/mentor-required',
  getParentRoute: () => rootRouteImport,
} as any)
const TestImgRoute = TestImgRouteImport.update({
  id: '/test/img',
  path: '/test/img',
  getParentRoute: () => rootRouteImport,
} as any)
const TestDashboardRoute = TestDashboardRouteImport.update({
  id: '/test/dashboard',
  path: '/test/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const TestBookingDemoRoute = TestBookingDemoRouteImport.update({
  id: '/test/booking-demo',
  path: '/test/booking-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const TestAlreadyRoute = TestAlreadyRouteImport.update({
  id: '/test/already',
  path: '/test/already',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorExpSimpleLoadingDemoRoute =
  ErrorExpSimpleLoadingDemoRouteImport.update({
    id: '/error-exp/simple-loading-demo',
    path: '/error-exp/simple-loading-demo',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthEmailVerificationRoute = AuthEmailVerificationRouteImport.update({
  id: '/email-verification',
  path: '/email-verification',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthEmailVerificationVerifiedRoute =
  AuthEmailVerificationVerifiedRouteImport.update({
    id: '/verified',
    path: '/verified',
    getParentRoute: () => AuthEmailVerificationRoute,
  } as any)
const AppProfileUserSlugRoute = AppProfileUserSlugRouteImport.update({
  id: '/profile/$userSlug',
  path: '/profile/$userSlug',
  getParentRoute: () => AppRoute,
} as any)
const AppMentorSetScheduleRoute = AppMentorSetScheduleRouteImport.update({
  id: '/mentor/set-schedule',
  path: '/mentor/set-schedule',
  getParentRoute: () => AppRoute,
} as any)
const AppMentorBecomeRoute = AppMentorBecomeRouteImport.update({
  id: '/mentor/become',
  path: '/mentor/become',
  getParentRoute: () => AppRoute,
} as any)
const AppBookingSessionMentorSlugRoute =
  AppBookingSessionMentorSlugRouteImport.update({
    id: '/booking/session/$mentorSlug',
    path: '/booking/session/$mentorSlug',
    getParentRoute: () => AppRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/email-verification': typeof AuthEmailVerificationRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/error-exp/simple-loading-demo': typeof ErrorExpSimpleLoadingDemoRoute
  '/test/already': typeof TestAlreadyRoute
  '/test/booking-demo': typeof TestBookingDemoRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/test/img': typeof TestImgRoute
  '/test/mentor-required': typeof TestMentorRequiredRoute
  '/app/': typeof AppIndexRoute
  '/app/mentor/become': typeof AppMentorBecomeRoute
  '/app/mentor/set-schedule': typeof AppMentorSetScheduleRoute
  '/app/profile/$userSlug': typeof AppProfileUserSlugRoute
  '/auth/email-verification/verified': typeof AuthEmailVerificationVerifiedRoute
  '/app/booking/session/$mentorSlug': typeof AppBookingSessionMentorSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/email-verification': typeof AuthEmailVerificationRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/error-exp/simple-loading-demo': typeof ErrorExpSimpleLoadingDemoRoute
  '/test/already': typeof TestAlreadyRoute
  '/test/booking-demo': typeof TestBookingDemoRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/test/img': typeof TestImgRoute
  '/test/mentor-required': typeof TestMentorRequiredRoute
  '/app/mentor/become': typeof AppMentorBecomeRoute
  '/app/mentor/set-schedule': typeof AppMentorSetScheduleRoute
  '/app/profile/$userSlug': typeof AppProfileUserSlugRoute
  '/auth/email-verification/verified': typeof AuthEmailVerificationVerifiedRoute
  '/app/booking/session/$mentorSlug': typeof AppBookingSessionMentorSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/email-verification': typeof AuthEmailVerificationRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/error-exp/simple-loading-demo': typeof ErrorExpSimpleLoadingDemoRoute
  '/test/already': typeof TestAlreadyRoute
  '/test/booking-demo': typeof TestBookingDemoRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/test/img': typeof TestImgRoute
  '/test/mentor-required': typeof TestMentorRequiredRoute
  '/app/': typeof AppIndexRoute
  '/app/mentor/become': typeof AppMentorBecomeRoute
  '/app/mentor/set-schedule': typeof AppMentorSetScheduleRoute
  '/app/profile/$userSlug': typeof AppProfileUserSlugRoute
  '/auth/email-verification/verified': typeof AuthEmailVerificationVerifiedRoute
  '/app/booking/session/$mentorSlug': typeof AppBookingSessionMentorSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/auth'
    | '/unauthorized'
    | '/auth/email-verification'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/error-exp/simple-loading-demo'
    | '/test/already'
    | '/test/booking-demo'
    | '/test/dashboard'
    | '/test/img'
    | '/test/mentor-required'
    | '/app/'
    | '/app/mentor/become'
    | '/app/mentor/set-schedule'
    | '/app/profile/$userSlug'
    | '/auth/email-verification/verified'
    | '/app/booking/session/$mentorSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/auth'
    | '/unauthorized'
    | '/auth/email-verification'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/error-exp/simple-loading-demo'
    | '/test/already'
    | '/test/booking-demo'
    | '/test/dashboard'
    | '/test/img'
    | '/test/mentor-required'
    | '/app/mentor/become'
    | '/app/mentor/set-schedule'
    | '/app/profile/$userSlug'
    | '/auth/email-verification/verified'
    | '/app/booking/session/$mentorSlug'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/auth'
    | '/unauthorized'
    | '/auth/email-verification'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/error-exp/simple-loading-demo'
    | '/test/already'
    | '/test/booking-demo'
    | '/test/dashboard'
    | '/test/img'
    | '/test/mentor-required'
    | '/app/'
    | '/app/mentor/become'
    | '/app/mentor/set-schedule'
    | '/app/profile/$userSlug'
    | '/auth/email-verification/verified'
    | '/app/booking/session/$mentorSlug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
  UnauthorizedRoute: typeof UnauthorizedRoute
  ErrorExpSimpleLoadingDemoRoute: typeof ErrorExpSimpleLoadingDemoRoute
  TestAlreadyRoute: typeof TestAlreadyRoute
  TestBookingDemoRoute: typeof TestBookingDemoRoute
  TestDashboardRoute: typeof TestDashboardRoute
  TestImgRoute: typeof TestImgRoute
  TestMentorRequiredRoute: typeof TestMentorRequiredRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/test/mentor-required': {
      id: '/test/mentor-required'
      path: '/test/mentor-required'
      fullPath: '/test/mentor-required'
      preLoaderRoute: typeof TestMentorRequiredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/img': {
      id: '/test/img'
      path: '/test/img'
      fullPath: '/test/img'
      preLoaderRoute: typeof TestImgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/dashboard': {
      id: '/test/dashboard'
      path: '/test/dashboard'
      fullPath: '/test/dashboard'
      preLoaderRoute: typeof TestDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/booking-demo': {
      id: '/test/booking-demo'
      path: '/test/booking-demo'
      fullPath: '/test/booking-demo'
      preLoaderRoute: typeof TestBookingDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/already': {
      id: '/test/already'
      path: '/test/already'
      fullPath: '/test/already'
      preLoaderRoute: typeof TestAlreadyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error-exp/simple-loading-demo': {
      id: '/error-exp/simple-loading-demo'
      path: '/error-exp/simple-loading-demo'
      fullPath: '/error-exp/simple-loading-demo'
      preLoaderRoute: typeof ErrorExpSimpleLoadingDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/email-verification': {
      id: '/auth/email-verification'
      path: '/email-verification'
      fullPath: '/auth/email-verification'
      preLoaderRoute: typeof AuthEmailVerificationRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/email-verification/verified': {
      id: '/auth/email-verification/verified'
      path: '/verified'
      fullPath: '/auth/email-verification/verified'
      preLoaderRoute: typeof AuthEmailVerificationVerifiedRouteImport
      parentRoute: typeof AuthEmailVerificationRoute
    }
    '/app/profile/$userSlug': {
      id: '/app/profile/$userSlug'
      path: '/profile/$userSlug'
      fullPath: '/app/profile/$userSlug'
      preLoaderRoute: typeof AppProfileUserSlugRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/mentor/set-schedule': {
      id: '/app/mentor/set-schedule'
      path: '/mentor/set-schedule'
      fullPath: '/app/mentor/set-schedule'
      preLoaderRoute: typeof AppMentorSetScheduleRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/mentor/become': {
      id: '/app/mentor/become'
      path: '/mentor/become'
      fullPath: '/app/mentor/become'
      preLoaderRoute: typeof AppMentorBecomeRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/booking/session/$mentorSlug': {
      id: '/app/booking/session/$mentorSlug'
      path: '/booking/session/$mentorSlug'
      fullPath: '/app/booking/session/$mentorSlug'
      preLoaderRoute: typeof AppBookingSessionMentorSlugRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AuthEmailVerificationRouteChildren {
  AuthEmailVerificationVerifiedRoute: typeof AuthEmailVerificationVerifiedRoute
}

const AuthEmailVerificationRouteChildren: AuthEmailVerificationRouteChildren = {
  AuthEmailVerificationVerifiedRoute: AuthEmailVerificationVerifiedRoute,
}

const AuthEmailVerificationRouteWithChildren =
  AuthEmailVerificationRoute._addFileChildren(
    AuthEmailVerificationRouteChildren,
  )

interface AuthRouteRouteChildren {
  AuthEmailVerificationRoute: typeof AuthEmailVerificationRouteWithChildren
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthEmailVerificationRoute: AuthEmailVerificationRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppMentorBecomeRoute: typeof AppMentorBecomeRoute
  AppMentorSetScheduleRoute: typeof AppMentorSetScheduleRoute
  AppProfileUserSlugRoute: typeof AppProfileUserSlugRoute
  AppBookingSessionMentorSlugRoute: typeof AppBookingSessionMentorSlugRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppMentorBecomeRoute: AppMentorBecomeRoute,
  AppMentorSetScheduleRoute: AppMentorSetScheduleRoute,
  AppProfileUserSlugRoute: AppProfileUserSlugRoute,
  AppBookingSessionMentorSlugRoute: AppBookingSessionMentorSlugRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AppRoute: AppRouteWithChildren,
  UnauthorizedRoute: UnauthorizedRoute,
  ErrorExpSimpleLoadingDemoRoute: ErrorExpSimpleLoadingDemoRoute,
  TestAlreadyRoute: TestAlreadyRoute,
  TestBookingDemoRoute: TestBookingDemoRoute,
  TestDashboardRoute: TestDashboardRoute,
  TestImgRoute: TestImgRoute,
  TestMentorRequiredRoute: TestMentorRequiredRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
