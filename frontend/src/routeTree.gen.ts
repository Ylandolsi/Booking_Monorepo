/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as TestImgRouteImport } from './routes/test/img'
import { Route as ProfileMeRouteImport } from './routes/profile/me'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as ProfileUserSlugIndexRouteImport } from './routes/profile/$userSlug/index'
import { Route as AuthEmailVerificationIndexRouteImport } from './routes/auth/email-verification/index'
import { Route as AuthEmailVerificationVerifiedRouteImport } from './routes/auth/email-verification/verified'
import { Route as AppUsersUserIdRouteImport } from './routes/app/users/$userId'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const TestImgRoute = TestImgRouteImport.update({
  id: '/test/img',
  path: '/test/img',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileMeRoute = ProfileMeRouteImport.update({
  id: '/profile/me',
  path: '/profile/me',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileUserSlugIndexRoute = ProfileUserSlugIndexRouteImport.update({
  id: '/profile/$userSlug/',
  path: '/profile/$userSlug/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthEmailVerificationIndexRoute =
  AuthEmailVerificationIndexRouteImport.update({
    id: '/auth/email-verification/',
    path: '/auth/email-verification/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthEmailVerificationVerifiedRoute =
  AuthEmailVerificationVerifiedRouteImport.update({
    id: '/auth/email-verification/verified',
    path: '/auth/email-verification/verified',
    getParentRoute: () => rootRouteImport,
  } as any)
const AppUsersUserIdRoute = AppUsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/profile/me': typeof ProfileMeRoute
  '/test/img': typeof TestImgRoute
  '/app/': typeof AppIndexRoute
  '/app/users/$userId': typeof AppUsersUserIdRoute
  '/auth/email-verification/verified': typeof AuthEmailVerificationVerifiedRoute
  '/auth/email-verification': typeof AuthEmailVerificationIndexRoute
  '/profile/$userSlug': typeof ProfileUserSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/profile/me': typeof ProfileMeRoute
  '/test/img': typeof TestImgRoute
  '/app': typeof AppIndexRoute
  '/app/users/$userId': typeof AppUsersUserIdRoute
  '/auth/email-verification/verified': typeof AuthEmailVerificationVerifiedRoute
  '/auth/email-verification': typeof AuthEmailVerificationIndexRoute
  '/profile/$userSlug': typeof ProfileUserSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/profile/me': typeof ProfileMeRoute
  '/test/img': typeof TestImgRoute
  '/app/': typeof AppIndexRoute
  '/app/users/$userId': typeof AppUsersUserIdRoute
  '/auth/email-verification/verified': typeof AuthEmailVerificationVerifiedRoute
  '/auth/email-verification/': typeof AuthEmailVerificationIndexRoute
  '/profile/$userSlug/': typeof ProfileUserSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/unauthorized'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/profile/me'
    | '/test/img'
    | '/app/'
    | '/app/users/$userId'
    | '/auth/email-verification/verified'
    | '/auth/email-verification'
    | '/profile/$userSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/unauthorized'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/profile/me'
    | '/test/img'
    | '/app'
    | '/app/users/$userId'
    | '/auth/email-verification/verified'
    | '/auth/email-verification'
    | '/profile/$userSlug'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/unauthorized'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/profile/me'
    | '/test/img'
    | '/app/'
    | '/app/users/$userId'
    | '/auth/email-verification/verified'
    | '/auth/email-verification/'
    | '/profile/$userSlug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  UnauthorizedRoute: typeof UnauthorizedRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  ProfileMeRoute: typeof ProfileMeRoute
  TestImgRoute: typeof TestImgRoute
  AuthEmailVerificationVerifiedRoute: typeof AuthEmailVerificationVerifiedRoute
  AuthEmailVerificationIndexRoute: typeof AuthEmailVerificationIndexRoute
  ProfileUserSlugIndexRoute: typeof ProfileUserSlugIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/test/img': {
      id: '/test/img'
      path: '/test/img'
      fullPath: '/test/img'
      preLoaderRoute: typeof TestImgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/me': {
      id: '/profile/me'
      path: '/profile/me'
      fullPath: '/profile/me'
      preLoaderRoute: typeof ProfileMeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$userSlug/': {
      id: '/profile/$userSlug/'
      path: '/profile/$userSlug'
      fullPath: '/profile/$userSlug'
      preLoaderRoute: typeof ProfileUserSlugIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/email-verification/': {
      id: '/auth/email-verification/'
      path: '/auth/email-verification'
      fullPath: '/auth/email-verification'
      preLoaderRoute: typeof AuthEmailVerificationIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/email-verification/verified': {
      id: '/auth/email-verification/verified'
      path: '/auth/email-verification/verified'
      fullPath: '/auth/email-verification/verified'
      preLoaderRoute: typeof AuthEmailVerificationVerifiedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/users/$userId': {
      id: '/app/users/$userId'
      path: '/users/$userId'
      fullPath: '/app/users/$userId'
      preLoaderRoute: typeof AppUsersUserIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppUsersUserIdRoute: typeof AppUsersUserIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppUsersUserIdRoute: AppUsersUserIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  UnauthorizedRoute: UnauthorizedRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  ProfileMeRoute: ProfileMeRoute,
  TestImgRoute: TestImgRoute,
  AuthEmailVerificationVerifiedRoute: AuthEmailVerificationVerifiedRoute,
  AuthEmailVerificationIndexRoute: AuthEmailVerificationIndexRoute,
  ProfileUserSlugIndexRoute: ProfileUserSlugIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
