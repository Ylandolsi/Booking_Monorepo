// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725144854_ChangeCompanyNameToCompany")]
    partial class ChangeCompanyNameToCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Users.EmailVerificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on_utc");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_email_verification_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_email_verification_token_user_id");

                    b.ToTable("email_verification_token", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("field");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<bool>("ToPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_present");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("university");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_educations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_educations_user_id");

                    b.ToTable("educations", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<bool>("ToPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_present");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_experiences");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_experiences_user_id");

                    b.ToTable("experiences", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_expertises");

                    b.ToTable("expertises", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Mentorship in web, backend, mobile, etc.",
                            Name = "Software Engineering"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mentorship in machines, manufacturing, CAD, etc.",
                            Name = "Mechanical Engineering"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mentorship in circuits, power systems, etc.",
                            Name = "Electrical Engineering"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Mentorship in construction, infrastructure, etc.",
                            Name = "Civil Engineering"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Mentorship in chemical processes, materials, etc.",
                            Name = "Chemical Engineering"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Mentorship in aircraft, spacecraft, etc.",
                            Name = "Aerospace Engineering"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Mentorship in sustainability, environment, etc.",
                            Name = "Environmental Engineering"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Frontend, backend, and fullstack web mentoring.",
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Android, iOS, cross-platform app mentoring.",
                            Name = "Mobile Development"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Mentorship in data analysis, ML, statistics.",
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Mentorship in ethical hacking, defense, etc.",
                            Name = "Cybersecurity"
                        },
                        new
                        {
                            Id = 12,
                            Description = "AWS, Azure, CI/CD, and infrastructure mentoring.",
                            Name = "Cloud & DevOps"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Mentorship in ML models, AI theory, etc.",
                            Name = "AI & Machine Learning"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Mentorship in user experience and interface design.",
                            Name = "UI/UX Design"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Mentorship for startup founders and entrepreneurs.",
                            Name = "Startup Coaching"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Mentorship in business models and scaling.",
                            Name = "Business Strategy"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Mentorship in digital marketing, social media, etc.",
                            Name = "Marketing & Branding"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Mentorship in B2B, B2C, pitching, etc.",
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Mentorship in online business and marketplaces.",
                            Name = "E-commerce"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Mentorship in product lifecycle, agile, etc.",
                            Name = "Product Management"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Mentorship in managing teams and tasks.",
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Mentorship in stocks, real estate, etc.",
                            Name = "Investment"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Budgeting, saving, financial planning.",
                            Name = "Personal Finance"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Corporate and freelance financial help.",
                            Name = "Accounting & Auditing"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Medical school and residency mentorship.",
                            Name = "General Medicine"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Clinical mentorship and nursing school support.",
                            Name = "Nursing"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Pharmaceutical career and education guidance.",
                            Name = "Pharmacy"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Psychology, therapy, and emotional support.",
                            Name = "Mental Health"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Mentorship in epidemiology, policy, etc.",
                            Name = "Public Health"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Mentorship in contracts, companies, etc.",
                            Name = "Corporate Law"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Legal career coaching in criminal justice.",
                            Name = "Criminal Law"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Mentorship in visa and immigration processes.",
                            Name = "Immigration Law"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Mentorship in patents, copyrights, etc.",
                            Name = "Intellectual Property Law"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Mentorship in team building and leading.",
                            Name = "Leadership & Management"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Mentorship in effective communication.",
                            Name = "Communication Skills"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Coaching on personal productivity.",
                            Name = "Time Management"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Confidence building and speech coaching.",
                            Name = "Public Speaking"
                        },
                        new
                        {
                            Id = 38,
                            Description = "Mock interviews and job prep.",
                            Name = "Job Interview Coaching"
                        },
                        new
                        {
                            Id = 39,
                            Description = "Profile and resume optimization.",
                            Name = "Resume & LinkedIn Review"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Long-term goal mentorship.",
                            Name = "Career Planning"
                        },
                        new
                        {
                            Id = 41,
                            Description = "Mentorship in tools like Photoshop, Figma.",
                            Name = "Graphic Design"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Camera use, editing, and career advice.",
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Mentorship in composition, mixing, etc.",
                            Name = "Music Production"
                        },
                        new
                        {
                            Id = 44,
                            Description = "Mentorship in writing books or articles.",
                            Name = "Writing & Publishing"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Mentorship in Premiere Pro, storytelling, etc.",
                            Name = "Video Editing"
                        },
                        new
                        {
                            Id = 46,
                            Description = "Unity, Unreal, and career mentorship.",
                            Name = "Game Development"
                        },
                        new
                        {
                            Id = 47,
                            Description = "Mentorship for language fluency.",
                            Name = "Language Learning"
                        },
                        new
                        {
                            Id = 48,
                            Description = "Mentorship for international students.",
                            Name = "Study Abroad Guidance"
                        },
                        new
                        {
                            Id = 49,
                            Description = "Mentorship in motivation, habits, etc.",
                            Name = "Life Coaching"
                        },
                        new
                        {
                            Id = 50,
                            Description = "System building, discipline, deep work.",
                            Name = "Productivity Coaching"
                        });
                });

            modelBuilder.Entity("Domain.Users.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "French"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Arabic"
                        });
                });

            modelBuilder.Entity("Domain.Users.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on_utc");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<DateTime?>("RevokedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_on_utc");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_external_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("bio");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_slug");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.MentorMentee", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_id");

                    b.Property<int>("MenteeId")
                        .HasColumnType("integer")
                        .HasColumnName("mentee_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.HasKey("MentorId", "MenteeId")
                        .HasName("pk_user_mentors");

                    b.HasIndex("MenteeId")
                        .HasDatabaseName("ix_user_mentors_mentee_id");

                    b.ToTable("user_mentors", "public");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserExpertise", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ExpertiseId")
                        .HasColumnType("integer")
                        .HasColumnName("expertise_id");

                    b.HasKey("UserId", "ExpertiseId")
                        .HasName("pk_user_expertises");

                    b.HasIndex("ExpertiseId")
                        .HasDatabaseName("ix_user_expertises_expertise_id");

                    b.ToTable("user_expertises", "public");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserLanguage", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.HasKey("UserId", "LanguageId")
                        .HasName("pk_user_languages");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_user_languages_language_id");

                    b.ToTable("user_languages", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("SharedKernel.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.HasIndex("ProcessedOnUtc")
                        .HasDatabaseName("ix_outbox_messages_processed_on_utc");

                    b.ToTable("outbox_messages", "public");
                });

            modelBuilder.Entity("Domain.Users.EmailVerificationToken", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_verification_token_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.Education", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_educations_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.Experience", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("Domain.Users.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name_last_name");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_asp_net_users_asp_net_users_id");
                        });

                    b.OwnsOne("Domain.Users.ValueObjects.ProfileCompletionStatus", "ProfileCompletionStatus", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<bool>("HasBio")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_bio");

                            b1.Property<bool>("HasEducation")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_education");

                            b1.Property<bool>("HasEmail")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_email");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_expertise");

                            b1.Property<bool>("HasGender")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_gender");

                            b1.Property<bool>("HasLanguages")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_languages");

                            b1.Property<bool>("HasName")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_name");

                            b1.Property<bool>("HasProfilePicture")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_profile_picture");

                            b1.Property<bool>("HasSocialLinks")
                                .HasColumnType("boolean")
                                .HasColumnName("profile_completion_status_has_social_links");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_asp_net_users_asp_net_users_id");
                        });

                    b.OwnsOne("Domain.Users.ValueObjects.ProfilePicture", "ProfilePictureUrl", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("ProfilePictureLink")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("profile_picture_url_profile_picture_link");

                            b1.Property<string>("ThumbnailUrlPictureLink")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("profile_picture_url_thumbnail_url_picture_link");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_asp_net_users_asp_net_users_id");
                        });

                    b.OwnsOne("Domain.Users.ValueObjects.SocialLinks", "SocialLinks", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Facebook")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_facebook");

                            b1.Property<string>("Github")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_github");

                            b1.Property<string>("Instagram")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_instagram");

                            b1.Property<string>("LinkedIn")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_linked_in");

                            b1.Property<string>("Portfolio")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_portfolio");

                            b1.Property<string>("Twitter")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_twitter");

                            b1.Property<string>("Youtube")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("social_links_youtube");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_asp_net_users_asp_net_users_id");
                        });

                    b.OwnsOne("Domain.Users.ValueObjects.Status", "Status", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean")
                                .HasColumnName("status_is_active");

                            b1.Property<bool>("IsMentor")
                                .HasColumnType("boolean")
                                .HasColumnName("status_is_mentor");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_asp_net_users_asp_net_users_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("ProfileCompletionStatus")
                        .IsRequired();

                    b.Navigation("ProfilePictureUrl")
                        .IsRequired();

                    b.Navigation("SocialLinks")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.JoinTables.MentorMentee", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "Mentee")
                        .WithMany("UserMentors")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_mentors_asp_net_users_mentee_id");

                    b.HasOne("Domain.Users.Entities.User", "Mentor")
                        .WithMany("UserMentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_mentors_asp_net_users_mentor_id");

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserExpertise", b =>
                {
                    b.HasOne("Domain.Users.Entities.Expertise", "Expertise")
                        .WithMany("UserExpertises")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_expertises_expertises_expertise_id");

                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("UserExpertises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_expertises_user_user_id");

                    b.Navigation("Expertise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserLanguage", b =>
                {
                    b.HasOne("Domain.Users.Entities.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_languages_languages_language_id");

                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_languages_user_user_id");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Domain.Users.Entities.Expertise", b =>
                {
                    b.Navigation("UserExpertises");
                });

            modelBuilder.Entity("Domain.Users.Entities.Language", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("Domain.Users.Entities.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("UserExpertises");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserMentees");

                    b.Navigation("UserMentors");
                });
#pragma warning restore 612, 618
        }
    }
}
