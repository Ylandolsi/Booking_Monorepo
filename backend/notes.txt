in integrations tests , background jobs needs to be triggered manually because they are not automatically executed in the test environment  . 
------

// Ensure the token is properly encoded for URL usage ( + , / , = .. )
string encodedToken = Uri.EscapeDataString(emailVerificationToken);
string verificationLink = $"{_frontEndOptions.BaseUrl}{_frontEndOptions.EmailVerificationPagePath}?token={encodedToken}&email={emailAdress}";
return verificationLink ?? throw new InvalidOperationException("Failed to generate verification link.");


dotnet ef migrations add SyncModelAndDb --project ../Infrastructure --startup-project .


System.Text.Json is case-insensitive by default, but Newtonsoft.Json is case-sensitive.


When you return your EF Core entities directly, System.Text.Json will serialize every public getter—mapped or not—so your DomainEvents list shows up even though it isn’t a database column.



[NotMapped]                  // EF Core will ignore it (optional, since it’s already not mapped)
[JsonIgnore]                 // JSON serializer will skip it
public List<IDomainEvent> DomainEvents => _domainContainer.DomainEvents;


to retrieve services :

var userContext = context.RequestServices.GetRequiredService<IUserContext>();
or 
using var scope = app.Services.CreateScope();
var userContext = scope.ServiceProvider.GetRequiredService<IUserContext>();

or 
private readonly IServiceProvider _serviceProvider;
using var scope = _serviceProvider.CreateScope();
var userManager = scope.ServiceProvider.GetRequiredService<UserManager<User>>();
var context = scope.ServiceProvider.GetRequiredService<IApplicationDbContext>();



# Step 1: Navigate to the 'src' directory
cd src

# Step 2: Create a new .NET solution named 'RiverBooks'
dotnet new sln -n RiverBooks

# Step 3: Create a new ASP.NET Core Web API project named 'RiverBooks.Web'
dotnet new webapi -n RiverBooks.Web

# Step 4: Add the Web API project to the solution
dotnet sln RiverBooks.sln add ./RiverBooks.Web/RiverBooks.Web.csproj

# Step 5: Create a new class library project named 'RiverBooks.Books'
dotnet new classlib -n RiverBooks.Books -o RiverBooks

# Step 6: Add the class library project to the solution
dotnet sln RiverBooks.sln add ./RiverBooks.Books/RiverBooks.Books.csproj

# Step 7: Install or update the global tool 'dotnet-ef' (Entity Framework Core)
dotnet tool install --global dotnet-ef
dotnet tool update --global dotnet-ef

# Step 8: Add Entity Framework Core Design package to the Web API project
dotnet add package Microsoft.EntityFrameworkCore.Design

# Step 9: Add an initial migration to the database context
#
# u have to call it from the main solution of the project 
# -c : dbcontext name 
# -p : csprof of the project of dbcotnext 
# -s : csprog of the main solution 
# -o : where u want to save the migration ( inside the the project -p )
##
dotnet ef migrations add Initial -c ApplicationDbContext -p ../Infrastructure/Infrastructure.csproj -s ./Web.Api.csproj -o ./Database/Migrations 



# Step 10: Apply the migration to update the database
dotnet ef database update


----
dotnet ef migrations add SyncModelAndDb --project ../Infrastructure --startup-project .
dotnet ef database update --project ../Infrastructure --startup-project .


dotnet ef migrations remove --project ../Infrastructure --startup-project .